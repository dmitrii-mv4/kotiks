<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Http\Requests\Users\Roles\RoleCreateRequest;
use App\Http\Requests\Users\Roles\RoleEditRequest;
use App\Models\Role;
use App\Models\User;
use App\Models\Permission;
use App\Models\RoleHasPermissions;
use App\Models\ModuleGenerator;

class RolesController extends Controller
{
    public function __construct()
    {
        $this->middleware('admin');
    }

    public function index()
    {
        $users = User::with('role')->get();
        $roles = Role::get();

        //$this->authorize('viewAny', \App\Models\User::class);

        return view('admin/users/roles/index', compact('roles', 'users'));
    }

    public function create()
    {
        $roles = Role::get();

        // Получаем все модули
        $allModulesData = ModuleGenerator::getAllModuleData();

        return view('admin/users/roles/create', compact('roles', 'allModulesData'));
    }

    public function store(RoleCreateRequest $request)
    {
        $validated = $request->validated();

        // Создаем роль
        $role = Role::create([
            'name' => $validated['name'],
        ]);

        // Убираем название роли из массива
        $allPermission = array_diff_key($validated, ['name' => 0]);

        // Получаем массив имен разрешений из ключей массива
        $permissionNames = array_keys($allPermission);

        // Ищем соответствующие разрешения в БД через модель Permission
        $permissions = Permission::whereIn('name', $permissionNames)->get();

        // Подготавливаем данные для вставки в таблицу RoleHasPermissions
        $rolePermissionsData = [];
        
        foreach ($permissions as $permission) {
            $rolePermissionsData[] = [
                'role_id' => $role->id,
                'permission_id' => $permission->id,
                'created_at' => now(),
                'updated_at' => now(),
            ];
        }

        // Массово добавляем связи в таблицу RoleHasPermissions
        RoleHasPermissions::insert($rolePermissionsData);

        return redirect()->route('admin.roles')->with('success', 'Новая роль создана');
    }

    public function edit(Role $role)
    {
        // Получаем все модули
        $allModulesData = ModuleGenerator::getAllModuleData();

        return view('admin/users/roles/edit', compact('role', 'allModulesData'));
    }

    public function update(Role $role, RoleEditRequest $request)
    {
        $validated = $request->validated();

        // Обновляем роль
        $role->update([
            'name' => $validated['name'],
        ]);

        // Убираем название роли из массива
        $allPermission = array_diff_key($validated, ['name' => 0]);

        // Получаем массив имен разрешений из ключей массива
        $permissionNames = array_keys($allPermission);

        // Ищем соответствующие разрешения в БД через модель Permission
        $permissions = Permission::whereIn('name', $permissionNames)->get();

        // Подготавливаем данные для вставки в таблицу RoleHasPermissions
        $rolePermissionsData = [];
        
        foreach ($permissions as $permission) {
            $rolePermissionsData[] = [
                'role_id' => $role->id,
                'permission_id' => $permission->id,
                'created_at' => now(),
                'updated_at' => now(),
            ];
        }

        // Удаляем старые разрешения роли
        RoleHasPermissions::where('role_id', $role->id)->delete();

        // Массово добавляем новые связи в таблицу RoleHasPermissions
        RoleHasPermissions::insert($rolePermissionsData);

        return redirect()->route('admin.roles')->with('success', 'Роль изменена');
    }

    public function delete(Role $role)
    {
        // Удаление всех связанных разрешений
        $role->permissions()->detach();

        // Удаление роли
        $role->delete();

        return redirect()->route('admin.roles')->with('success', 'Роль удалена');
    }
}
